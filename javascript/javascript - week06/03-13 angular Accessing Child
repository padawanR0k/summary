**부모 컴포넌트에서 자식 요소(자식 컴포넌트, 디렉티브, 네이티브 DOM 요소)에 접근이 필요한 경우**가 있다. 예를 들어 부모 컴포넌트에서 자식 컴포넌트의 프로퍼티를 직접 변경하고 싶다던지 메소드를 직접 실행하고 싶은 경우이다. Angular는 부모 컴포넌트에서 자식 요소에 접근할 수 있는 데코레이터들을 제공한다.

- @ViewChild
- @ViewChildren
- @ContentChild
- @ContentChildren

일반적인 자바스크립트의 DOM 콜렉터들은 리턴값의 타입이 제 각각임 ex) Nodelist, HTMLcollection

```typescript
// app.component.ts
import { Component, ViewChild } from '@angular/core';
import { ChildComponent } from './child/child.component';

@Component({
  selector: 'app-root',
  template: `
    <h3>Parent</h3> <!-- 네이티브 요소 -->
    <button type="button" (click)="toggle()">Toggle Child</button>
    <button type="button" (click)="changeText()">Change Child's text</button>
    <child></child> <!-- 컴포넌트 or 디렉티브  라고 불림--> 
  ` 
  <!-- 모두를 View child 라고 부른다. -->
})
export class AppComponent {
	<!-- class 입장에선 위에것 모두 요소 -->
}
```



# 1. @ViewChild와 @ViewChildren

![viewchild](http://poiemaweb.com/img/viewchild.png)

`@ViewChild(탐색대상 클래스명) 프로퍼티명: 탐색대상 클래스명;`



##1.1 @ViewChild

@ViewChild 데코레이터는 **1개의 자식 요소만을 가져올 수 있다**. 또한 접근 제한자(Access modifier) public으로 공개된 프로퍼티, 메소드에만 접근할 수 있다. typescript는 public, protected, private와 같은 접근 제한자를 지정하지 않은 프로퍼티, 메소드를 기본설정인 public으로 지정한다.

```typescript
////// app.component.ts
import { Component, ViewChild } from '@angular/core';
import { ChildComponent } from './child/child.component';

@Component({
  selector: 'app-root',
  template: `
    <h3>Parent</h3>
    <button type="button" (click)="toggle()">Toggle Child</button>
    <button type="button" (click)="changeText()">Change Child's text</button>
    <child></child>
  `
})
export class AppComponent {
  // myChild 프로퍼티에 자식 컴포넌트 ChildComponent의 인스턴스가 바인딩된다.
  @ViewChild(ChildComponent) myChild: ChildComponent;
		  // 가지고 올 컴포넌트 ) 프로퍼티명 : 컴포넌트
  toggle() {
    // 자식 컴포넌트의 프로퍼티를 직접 변경할 수 있다.
    this.myChild.isShow = !this.myChild.isShow;
  }

  changeText() {
    // 자식 컴포넌트의 메소드를 직접 실행할 수 있다.
    this.myChild.changeText('Hello');
  }
}




///// child.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'child',
  template: `
    <div *ngIf="isShow">{{ contentText }}</div>
  `,
  styles: [`
    div {
      width: 100px;
      height: 100px;
      text-align: center;
      line-height: 100px;
      background-color: gray;
      color: white;
      margin-top: 10px;
    }
  `]
})
export class ChildComponent {
  // 부모 컴포넌트가 자식 컴포넌트의 뷰를 감추거나 보이기 위해 직접 접근할 프로퍼티.
  isShow = true;
  contentText = 'Child';

  // 부모 컴포넌트가 자식 컴포넌트의 contentText 프로퍼티를 변경하기 위해 직접 접근할 메소드
  changeText(text: string) {
    this.contentText = text;
  }
}
```

이건 잘 쓰이지 않고 이 것을 쓰지않고도 기능을 구현 할 수 있을것이다. 다시 생각해보자!

##1.2 @ViewChildren

![viewchild](http://poiemaweb.com/img/viewchildren.png)

`@ViewChildren(탐색대상 클래스명) 프로퍼티명: QueryList<탐색대상 클래스명>;`

QueryList는 배열도 아닌게 배열이랑 똑같이 쓸 수 있다.





```typescript
// child.component.ts
import { Component, Input } from '@angular/core';

@Component({
  selector: 'child',
  template: `
    <input
      type="checkbox"
      [id]="checkbox.id"
      [checked]="checkbox.checked">
    <label [for]="checkbox.id">{{ checkbox.label }}</label>
  `
})
export class ChildComponent {
  // 부모 컴포넌트가 직접 접근할 프로퍼티.
  @Input() checkbox: { id: number, label: string, checked: boolean };
}






// app.component.ts
import { Component, ViewChildren, QueryList } from '@angular/core';
import { ChildComponent } from './child/child.component';

@Component({
  selector: 'app-root',
  template: `
    <h3>Parent</h3>
    <button type="button" (click)="toggle()">Toggle Child</button>
    <div *ngFor="let checkbox of checkboxs">
      <child [checkbox]="checkbox"></child>
    </div>
  `
})
export class AppComponent {
  checkboxs: [{ id: number, label: string, checked: boolean }];
  active: boolean;

  // @ViewChildren 데코레이터는 여러개의 자식 요소를 취득한다.
  // 이때 취득된 자식 요소를 바인딩할 프로퍼티의 타입은 QueryList이다.
  @ViewChildren(ChildComponent) myChildren: QueryList<ChildComponent>;

  constructor() {
    this.checkboxs = [
      {id: 1, label: 'HTML', checked: true},
      {id: 2, label: 'CSS', checked: false},
      {id: 3, label: 'Javascript', checked: false}
    ];
    this.active = false;
  }

  toggle() {
    this.active = !this.active;
    // QueryList는 마치 자바스크립트 배열과 같이 사용할 수 있다.( 배열이 쓰는 메서드를 구현해 놓음)
    this.myChildren.forEach(child => child.checkbox.checked = this.active);
  }
}
```



##1.3 템플릿 참조 변수를 사용한 네이티브 DOM 접근

![elementref](http://poiemaweb.com/img/elementref.png)

**템플릿 참조 변수**를 태그에 지정하고 그것에 일치하는 태그를 가져와서 인스턴스에 담는다. 값을 가져와서 담을 때 무조건 : ElementRef; 타입으로 받아야한다. 보안문제 때문에

 이것 또한 여러 개를 가져올때 QueryList 타입으로 가져온다.

```typescript
// app.component.ts
import { Component, ViewChild, ViewChildren, QueryList, ElementRef } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <h1 #h1>Heading1</h1>
    <h2 #h2>Heading2</h2>
    <h3 #h3>Heading3</h3>
  `
})
export class AppComponent {

  // @ViewChild 데코레이터의 인자로 탐색 대상 요소에 지정된 템플릿 참조 변수를 문자열의 형태로 전달한다.
  // 템플릿 참조 변수를 사용하여 네이티브 DOM을 탐색한 경우, 탐색 결과는 ElementRef 타입의 인스턴스가 바인딩된다.
  @ViewChild('h1') myElem: ElementRef;  

  // @ViewChildren 데코레이터의 인자로 탐색 대상 요소에 지정된 템플릿 참조 변수의 리스트를 문자열의 형태로 전달한다.
  // 템플릿 참조 변수를 사용하여 네이티브 DOM을 탐색한 경우, 탐색 결과는 ElementRef 타입 인스턴스의 리스트가 바인딩된다.
  @ViewChildren('h2, h3') myElems: QueryList<ElementRef>;

  constructor(elementRef: ElementRef) {
    // 생성자 함수에 주입된 ElementRef는 컴포넌트의 루트 요소를 반환한다.
    console.log(elementRef);
  }
 
  // Angular가 뷰를 초기화하기 이전에는 DOM에 접근할 수 없다.
  ngAfterViewInit() {
    console.log(this.myElem); // h1을 담아놓은것
    this.myElems.forEach(child => console.log(child)); // h2,h3을 담아놓은것
  }
}
```

템플릿 참조 변수를 사용하여 네이티브 DOM을 탐색한 경우, 탐색 결과로 **ElementRef 타입의 인스턴스가 바인딩**된다. ElementRef는 **네이티브 DOM의 프로퍼티를 담고** 있는 **nativeElement 프로퍼티를 소유**한다. 따라서 **ElementRef.nativeElement로 접근하면 네이티브 DOM의 프로퍼티에 접근**할 수 있다.



######  ngAfterViewInit() : 뷰 초기화가 종료됐을 때 실행되는 컴포넌트 생명주기 메소드이다. 

1. 객체를 만든다. 
2. 프로퍼티를 초기화한다.
3. input 이나 output로 장식된 프로퍼티들을 초기화  <-- 이때 실행할 것들 (마치 script태그를 맨마지막에 쓰듯이)
4. View를 보여준다.

# 2. @ContentChild와 @ContentChildren



# 2.1 콘텐트 프로젝션(Content Projection)

Angular는 콘텐트 프로젝션(Content projection)을 통해 자식 컴포넌트의 콘텐츠를 지정할 수 있다. AngularJS에서 트랜스클루전(transclusion)이라고 불렀던 콘텐트 프로젝션은 부모 컴포넌트가 자식 컴포넌트에게 부모 컴포넌트의 템플릿 일부를 콘텐츠로 전달할 수 있는 기능이다. 자식 컴포넌트는 부모 컴포넌트가 전달한 콘텐츠를 전달받아 표시할 위치를 ngContent 디렉티브를 사용하여 지정한다.

예를 들어 아래와 같이 부모 컴포넌트는 자식 컴포넌트를 템플릿에 추가하면서 자식 컴포넌트에 콘텐츠를 지정하였다. 이 콘텐츠(<p>Contents</p>)는 자식 컴포넌트에 전달된다.



![HTML 요소](http://poiemaweb.com/img/tag.png)

![multi-slot-content-projection](http://poiemaweb.com/img/multi-slot-content-projection.png)



# 2.2 @ContentChild와 @ContentChildren

컴포넌트 템플릿에 배치된 자식요소(자식 컴포넌트, 디렉티브, 네이티브 DOM 요소) 즉 ViewChild의 시작 태그와 종료 태그 사이에 있는 콘텐츠를 ContentChild라고 한다. @ContentChild와 @ContentChildren 데코레이터는 이 ContentChild를 탐색할 때 사용한다. 이름에서 알 수 있듯이 @ContentChild는 탐색 조건에 부합하는 1개의 콘텐츠를 취득할 수 있고, @ContentChildren는 탐색 조건에 부합하는 여러개의 콘텐츠를 한꺼번에 취득할 수 있다.